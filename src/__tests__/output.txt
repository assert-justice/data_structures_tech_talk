FAIL src/__tests__/linked_list.spec.js
  Linked List Class
    √ it should implement constructor and toString (2 ms)
    × it should implement length (2 ms)
    √ it should implement addFirst (1 ms)
    √ it should implement addLast
    √ it should implement addAt
    √ addAt at index zero operates like addFirst
    × adding at an index 1 beyond the end of the list operates like addLast (2 ms)
    √ attempting to add an element at an out of bounds index should fail (1 ms)
    √ it should implement getFirst
    √ it should implement getLast
    √ it should implement getAt (1 ms)
    √ attempting to add an element at a negative index should fail
    × it should implement removeFirst (1 ms)
    √ attempting to removeFirst on an empty list should fail
    × it should implement removeLast
    √ attempting to removeLast on an empty list should fail
    × it should implement removeAt
    √ attempting to removeAt on an empty list should fail (1 ms)
    √ attempting to removeAt at an out of bounds index should fail
    √ it should implement concat
    √ Using concat where either list is empty should return the non empty list
    √ implement cut (1 ms)
    √ cutting at index zero returns an empty list and the original list
    √ cutting the last index returns the original ist and an empty list (1 ms)
    √ cutting out of the bounds of a list throws an error
    √ it implements reverse
    √ it reverses in place (1 ms)

  ● Linked List Class › it should implement length

    expect(received).toBe(expected) // Object.is equality

    Expected: 5
    Received: 0

      10 |     test('it should implement length', ()=>{
      11 |         const list = new List(spices);
    > 12 |         expect(list.length()).toBe(spices.length);
         |                               ^
      13 |     });
      14 |     test('it should implement addFirst', ()=>{
      15 |         const list = new List();

      at Object.toBe (src/__tests__/linked_list.spec.js:12:31)

  ● Linked List Class › adding at an index 1 beyond the end of the list operates like addLast

    expect(received).toBe(expected) // Object.is equality

    Expected: "scary, posh, ginger, sporty, baby"
    Received: "baby, sporty, ginger, posh, scary"

      45 |             list.addAt(spice, list.length());
      46 |         }
    > 47 |         expect(list.toString()).toBe(spices.join(', '));
         |                                 ^
      48 |     });
      49 |     test('attempting to add an element at an out of bounds index should fail', ()=>{
      50 |         const list = new List(spices);

      at Object.toBe (src/__tests__/linked_list.spec.js:47:33)

  ● Linked List Class › it should implement removeFirst

    expect(received).toBe(expected) // Object.is equality

    Expected: 4
    Received: 0

      77 |             const list = new List(spices);
      78 |             const res = list[method](idx);
    > 79 |             expect(list.length()).toBe(spices.length - 1);
         |                                   ^
      80 |             expect(res).toBe(spices[idx]);
      81 |         });
      82 |         test(`attempting to ${method} on an empty list should fail`,()=>{

      at Object.toBe (src/__tests__/linked_list.spec.js:79:35)

  ● Linked List Class › it should implement removeLast

    expect(received).toBe(expected) // Object.is equality

    Expected: 4
    Received: 0

      77 |             const list = new List(spices);
      78 |             const res = list[method](idx);
    > 79 |             expect(list.length()).toBe(spices.length - 1);
         |                                   ^
      80 |             expect(res).toBe(spices[idx]);
      81 |         });
      82 |         test(`attempting to ${method} on an empty list should fail`,()=>{

      at Object.toBe (src/__tests__/linked_list.spec.js:79:35)

  ● Linked List Class › it should implement removeAt

    expect(received).toBe(expected) // Object.is equality

    Expected: 4
    Received: 0

      77 |             const list = new List(spices);
      78 |             const res = list[method](idx);
    > 79 |             expect(list.length()).toBe(spices.length - 1);
         |                                   ^
      80 |             expect(res).toBe(spices[idx]);
      81 |         });
      82 |         test(`attempting to ${method} on an empty list should fail`,()=>{

      at Object.toBe (src/__tests__/linked_list.spec.js:79:35)

Test Suites: 1 failed, 1 total
Tests:       5 failed, 22 passed, 27 total
Snapshots:   0 total
Time:        0.517 s, estimated 1 s
Ran all test suites.
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! nodes_and_graphs@1.0.0 test: `jest`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the nodes_and_graphs@1.0.0 test script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\riley\AppData\Roaming\npm-cache\_logs\2023-01-18T08_30_20_981Z-debug.log
